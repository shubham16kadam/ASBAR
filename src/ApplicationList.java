


import java.awt.AWTException;
import java.io.BufferedReader;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import static java.lang.System.out;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JFrame;
import org.json.JSONArray;

import org.json.JSONException;
//import org.json.JSONObject;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.openqa.selenium.Cookie;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.openqa.selenium.Keys;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author pk
 */
public class ApplicationList extends javax.swing.JFrame {
    static JTable table = null;
    static DefaultTableModel model = null;
    static Process p = null;
    static File dirList = null;
    static BufferedReader br = null;
    static WebElement get,value;
    static WebDriver driver;
    static int textSize=0,size=0,count=0;
    static String type=null;    
    static String user="";
    static String url="";
    static String username1="";
    static String output;
    /**
     * Creates new form ApplicationList
     */
    public ApplicationList() {
        
            initComponents(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane(table);
        jButton1 = new javax.swing.JButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        jButton1.setText("All");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(288, 288, 288)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(213, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(jButton1)
                .addContainerGap(87, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            Process p = Runtime.getRuntime().exec("whoami");
            InputStream stream = p.getInputStream();
            BufferedReader username = new BufferedReader(new InputStreamReader(stream));
            user = username.readLine();
            
            //username = new BufferedReader(new InputStreamReader(user.getInputStream()));
            out.println("" + user);
            String s1="/home/"+user+"/Asbar/"+username1+"/WebApp";
            p = Runtime.getRuntime().exec("ls", null, new File("/home/"+user+"/Asbar/"+username1+"/WebApp/"));
            
            BufferedReader br1 = new BufferedReader(new InputStreamReader(p.getInputStream()));
             output = br1.readLine();
            while(output != null){     
                out.println("" +output);        
                rst(output);  
                ++count;
                output = br1.readLine();
            }
        } catch (IOException ex) {
            Logger.getLogger(ApplicationList.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try{
            username();
            Process p = Runtime.getRuntime().exec("whoami");
            InputStream stream = p.getInputStream();
            BufferedReader username = new BufferedReader(new InputStreamReader(stream));
            user = username.readLine();
            
            //username = new BufferedReader(new InputStreamReader(user.getInputStream()));
            out.println("" + user);
            String s1="/home/"+user+"/Asbar/"+username1+"/WebApp";
            
            
            
            
            System.setProperty("webdriver.firefox.driver","geckodriver");
            
            table = new JTable();
            model = new DefaultTableModel();
            table.setModel(model);
            model.addColumn("Application");
            System.out.println(user);
            p = Runtime.getRuntime().exec("ls", null, new File("/home/"+user+"/Asbar/"+username1+"/WebApp/"));
            
            br = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String output = br.readLine();
            while(output != null){
                model.addRow(new Object[]{output});
                    //System.out.println(output);
                output = br.readLine();
            }
            System.out.println(output);
            
            table.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
                public void valueChanged(ListSelectionEvent event) 
                {
                    
                    if (!event.getValueIsAdjusting()) 
                    {
                        try{
                        driver=new FirefoxDriver();
                        driver.manage().window().maximize();
                        driver.manage().deleteAllCookies();
                        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
                        driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS); 
                        String app=table.getValueAt(table.getSelectedRow(), 0).toString();
                        System.out.println(app);
                        FileReader freader = new FileReader("/home/"+user+"/Asbar/"+username1+"/WebApp/"+app+"/"+"url.txt");
                        BufferedReader br = new BufferedReader(freader);
                        String url;
                        url = br.readLine();

                        freader.close();
                        driver.get(url);

                        File file = new File("/home/"+user+"/Asbar/"+username1+"/WebApp/"+app+"/"+"session.data");							
                        FileReader fileReader = new FileReader(file);							
                        BufferedReader Buffreader = new BufferedReader(fileReader);							
                        String strline;			
                        Cookie ck = null;
                        while((strline=Buffreader.readLine())!=null){									
                        StringTokenizer token = new StringTokenizer(strline,";");									
                        while(token.hasMoreTokens()){					
                        try{
                        String name = token.nextToken();					
                        String value = token.nextToken();					
                        String domain = token.nextToken();					
                        String path = token.nextToken();					
                        String val=token.nextToken();
                        Date expiry = null;					



                        Boolean isSecure = new Boolean(token.nextToken()).booleanValue();


                        ck = new Cookie(name,value,domain,path,expiry,isSecure);			
                        System.out.println(name+"\n"+value+"\n"+domain+"\n"+path+"\n"+expiry+"\n"+isSecure);

                        System.out.println(ck);

                        }
                        catch(IllegalArgumentException e){}

                        }
                        
                        driver.manage().addCookie(ck); // This will add the stored cookie to your current session	
                        }
                        try{
                        
                        driver.get(url);



                        Object obj = new JSONParser().parse(new FileReader("/home/"+user+"/Asbar/"+username1+"/WebApp/"+app+"/"+"Form.json"));
                        // typecasting obj to JSONObject

                        JSONObject jsonObject = (JSONObject) obj;
                        Set keys = jsonObject.keySet();
                        Iterator a = keys.iterator();    
                        List<WebElement> myTagsWithType = driver.findElements(By.cssSelector("[type]"));
                        List<String>textVal= new ArrayList<String>();
                        System.out.println("Total tags with id as one of the attribute is : " + myTagsWithType.size());
                        // now printing all id values one by one
                        size=myTagsWithType.size();
                        System.out.println("JSON FILE AGAIN READING... ");
                        // parsing file "JSONExample.json"
                        obj = new JSONParser().parse(new FileReader("/home/"+user+"/Asbar/"+username1+"/WebApp/"+app+"/"+"Form.json"));
                        // typecasting obj to JSONObject

                        jsonObject = (JSONObject) obj;
                        keys = jsonObject.keySet();
                        a = keys.iterator();

                        while(a.hasNext()) { //this loop is for retriving the contents
                         // loop to get the dynamic key
                            String key = (String)a.next();
                            String value = (String)jsonObject.get(key);
                            if(value.isEmpty())
                            {
                                System.out.print("key : "+key);
                            }
                            else
                            {    
                                driver.findElement(By.name(key)).sendKeys(value);
                                System.out.print("key : "+key);
                                System.out.println(" value :"+value);
                            }

                        }


                    }

                    catch(NoSuchElementException e){
                        }
                    		
                    }catch(Exception ex){					
                        ex.printStackTrace();			
                    }
                            
                    }
                        
                        
                }      
            });
            
        } catch (IOException ex) {
            Logger.getLogger(ApplicationList.class.getName()).log(Level.SEVERE, null, ex);
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ApplicationList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ApplicationList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ApplicationList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ApplicationList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ApplicationList().setVisible(true);
            }
        });
    }
    
    public static void username() throws IOException{
        try {
            FileInputStream fstream = null;
            fstream = new FileInputStream("username");
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            
            username1=br.readLine();
            
            fstream.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ApplicationList.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static void rst(String app)
    {
            try{
                         
                        //String app=table.getValueAt(table.getSelectedRow(), 0).toString();
                        //System.out.println(app);
                        WebDriver driver;
                        driver=new FirefoxDriver();
                        driver.manage().window().maximize();
                        driver.manage().deleteAllCookies();
                        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
                        driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);    
                         
                        FileReader freader = new FileReader("/home/"+user+"/Asbar/"+username1+"/WebApp/"+app+"/"+"url.txt");
                        BufferedReader br = new BufferedReader(freader);
                        String url;
                        url = br.readLine();

                        freader.close();
                        driver.get(url);

                        File file = new File("/home/"+user+"/Asbar/"+username1+"/WebApp/"+app+"/"+"session.data");							
                        FileReader fileReader = new FileReader(file);							
                        BufferedReader Buffreader = new BufferedReader(fileReader);							
                        String strline;			
                        Cookie ck = null;
                        while((strline=Buffreader.readLine())!=null){									
                        StringTokenizer token = new StringTokenizer(strline,";");									
                        while(token.hasMoreTokens()){					
                        try{
                        String name = token.nextToken();					
                        String value = token.nextToken();					
                        String domain = token.nextToken();					
                        String path = token.nextToken();					
                        String val=token.nextToken();
                        Date expiry = null;					



                        Boolean isSecure = new Boolean(token.nextToken()).booleanValue();


                        ck = new Cookie(name,value,domain,path,expiry,isSecure);			
                        System.out.println(name+"\n"+value+"\n"+domain+"\n"+path+"\n"+expiry+"\n"+isSecure);

                        System.out.println(ck);

                        }
                        catch(IllegalArgumentException e){}

                        }
                        driver.manage().addCookie(ck); // This will add the stored cookie to your current session
                        }
                        try{
                        	
                        driver.get(url);



                        Object obj = new JSONParser().parse(new FileReader("/home/"+user+"/Asbar/"+username1+"/WebApp/"+app+"/"+"Form.json"));
                        // typecasting obj to JSONObject

                        JSONObject jsonObject = (JSONObject) obj;
                        Set keys = jsonObject.keySet();
                        Iterator a = keys.iterator();    
                        List<WebElement> myTagsWithType = driver.findElements(By.cssSelector("[type]"));
                        List<String>textVal= new ArrayList<String>();
                        System.out.println("Total tags with id as one of the attribute is : " + myTagsWithType.size());
                        // now printing all id values one by one
                        size=myTagsWithType.size();
                        System.out.println("JSON FILE AGAIN READING... ");
                        // parsing file "JSONExample.json"
                        obj = new JSONParser().parse(new FileReader("/home/"+user+"/Asbar/"+username1+"/WebApp/"+app+"/"+"Form.json"));
                        // typecasting obj to JSONObject

                        jsonObject = (JSONObject) obj;
                        keys = jsonObject.keySet();
                        a = keys.iterator();

                        while(a.hasNext()) { //this loop is for retriving the contents
                         // loop to get the dynamic key
                            String key = (String)a.next();
                            String value = (String)jsonObject.get(key);
                            if(value.isEmpty())
                            {
                                System.out.print("key : "+key);
                            }
                            else
                            {    
                                driver.findElement(By.name(key)).sendKeys(value);
                                System.out.print("key : "+key);
                                System.out.println(" value :"+value);
                            }

                        }

                        //driver.close();

                    }

                    catch(NoSuchElementException e){
                        }
                    		
                    }catch(Exception ex){					
                        ex.printStackTrace();			
                    }                
        
    }
                            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
